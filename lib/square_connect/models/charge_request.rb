=begin
Square Connect API

No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SquareConnect
  # Defines the parameters that can be included in the body of a request to the [Charge](#endpoint-charge) endpoint.
  class ChargeRequest
    # A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency keys](#idempotencykeys) for more information.
    attr_accessor :idempotency_key

    # The amount of money to charge.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  The value of `currency` must match the currency associated with the business that is charging the card.
    attr_accessor :amount_money

    # A nonce generated from the `SqPaymentForm` that represents the card to charge.  The application that provides a nonce to this endpoint must be the _same application_ that generated the nonce with the `SqPaymentForm`. Otherwise, the nonce is invalid.  Do not provide a value for this field if you provide a value for `customer_card_id`.
    attr_accessor :card_nonce

    # The ID of the customer card on file to charge. Do not provide a value for this field if you provide a value for `card_nonce`.  If you provide this value, you _must_ also provide a value for `customer_id`.
    attr_accessor :customer_card_id

    # If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the [CaptureTransaction](#endpoint-capturetransaction) endpoint) or a Void (with the [VoidTransation](#endpoint-voidtransaction) endpoint).  Default value: `false`
    attr_accessor :delay_capture

    # An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).  This value cannot exceed 40 characters.
    attr_accessor :reference_id

    # An optional note to associate with the transaction.  This value cannot exceed 60 characters.
    attr_accessor :note

    # The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise.
    attr_accessor :customer_id

    # The buyer's billing address. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `shipping_address` is provided.
    attr_accessor :billing_address

    # The buyer's shipping address, if available. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `billing_address` is provided.
    attr_accessor :shipping_address

    # The buyer's email address, if available. This value is optional, but this transaction is ineligible for chargeback protection if it is not provided.
    attr_accessor :buyer_email_address

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'idempotency_key' => :'idempotency_key',
        :'amount_money' => :'amount_money',
        :'card_nonce' => :'card_nonce',
        :'customer_card_id' => :'customer_card_id',
        :'delay_capture' => :'delay_capture',
        :'reference_id' => :'reference_id',
        :'note' => :'note',
        :'customer_id' => :'customer_id',
        :'billing_address' => :'billing_address',
        :'shipping_address' => :'shipping_address',
        :'buyer_email_address' => :'buyer_email_address'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'idempotency_key' => :'String',
:'amount_money' => :'Money',
:'card_nonce' => :'String',
:'customer_card_id' => :'String',
:'delay_capture' => :'BOOLEAN',
:'reference_id' => :'String',
:'note' => :'String',
:'customer_id' => :'String',
:'billing_address' => :'Address',
:'shipping_address' => :'Address',
:'buyer_email_address' => :'String'
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      if attributes[:'idempotency_key']
        self.idempotency_key = attributes[:'idempotency_key']
      end
      if attributes[:'amount_money']
        self.amount_money = attributes[:'amount_money']
      end
      if attributes[:'card_nonce']
        self.card_nonce = attributes[:'card_nonce']
      end
      if attributes[:'customer_card_id']
        self.customer_card_id = attributes[:'customer_card_id']
      end
      if attributes[:'delay_capture']
        self.delay_capture = attributes[:'delay_capture']
      end
      if attributes[:'reference_id']
        self.reference_id = attributes[:'reference_id']
      end
      if attributes[:'note']
        self.note = attributes[:'note']
      end
      if attributes[:'customer_id']
        self.customer_id = attributes[:'customer_id']
      end
      if attributes[:'billing_address']
        self.billing_address = attributes[:'billing_address']
      end
      if attributes[:'shipping_address']
        self.shipping_address = attributes[:'shipping_address']
      end
      if attributes[:'buyer_email_address']
        self.buyer_email_address = attributes[:'buyer_email_address']
      end
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          idempotency_key == o.idempotency_key &&
          amount_money == o.amount_money &&
          card_nonce == o.card_nonce &&
          customer_card_id == o.customer_card_id &&
          delay_capture == o.delay_capture &&
          reference_id == o.reference_id &&
          note == o.note &&
          customer_id == o.customer_id &&
          billing_address == o.billing_address &&
          shipping_address == o.shipping_address &&
          buyer_email_address == o.buyer_email_address
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [idempotency_key, amount_money, card_nonce, customer_card_id, delay_capture, reference_id, note, customer_id, billing_address, shipping_address, buyer_email_address].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SquareConnect.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
