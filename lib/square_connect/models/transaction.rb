=begin
Square Connect API

No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SquareConnect
  # Represents a transaction processed with Square, either with the Connect API or with Square Register.  The `tenders` field of this object lists all methods of payment used to pay in the transaction.
  class Transaction
    # The transaction's unique ID, issued by Square payments servers.
    attr_accessor :id

    # The ID of the transaction's associated location.
    attr_accessor :location_id

    # The time when the transaction was created, in RFC 3339 format.
    attr_accessor :created_at

    # The tenders used to pay in the transaction.
    attr_accessor :tenders

    # Refunds that have been applied to any tender in the transaction.
    attr_accessor :refunds

    # If the transaction was created with the [Charge](#endpoint-charge) endpoint, this value is the same as the value provided for the `reference_id` parameter in the request to that endpoint. Otherwise, it is not set.
    attr_accessor :reference_id

    # The Square product that processed the transaction.
    attr_accessor :product

    # If the transaction was created in the Square Register app, this value is the ID generated for the transaction by Square Register.  This ID has no relationship to the transaction's canonical `id`, which is generated by Square's backend servers. This value is generated for bookkeeping purposes, in case the transaction cannot immediately be completed (for example, if the transaction is processed in offline mode).  It is not currently possible with the Connect API to perform a transaction lookup by this value.
    attr_accessor :client_id

    # The order associated with this transaction, if any.
    attr_accessor :order

    # The shipping address provided in the request, if any.
    attr_accessor :shipping_address

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'location_id' => :'location_id',
        :'created_at' => :'created_at',
        :'tenders' => :'tenders',
        :'refunds' => :'refunds',
        :'reference_id' => :'reference_id',
        :'product' => :'product',
        :'client_id' => :'client_id',
        :'order' => :'order',
        :'shipping_address' => :'shipping_address'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
:'location_id' => :'String',
:'created_at' => :'String',
:'tenders' => :'Array<Tender>',
:'refunds' => :'Array<Refund>',
:'reference_id' => :'String',
:'product' => :'String',
:'client_id' => :'String',
:'order' => :'Order',
:'shipping_address' => :'Address'
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      if attributes[:'id']
        self.id = attributes[:'id']
      end
      if attributes[:'location_id']
        self.location_id = attributes[:'location_id']
      end
      if attributes[:'created_at']
        self.created_at = attributes[:'created_at']
      end
      if attributes[:'tenders']
        if (value = attributes[:'tenders']).is_a?(Array)
          self.tenders = value
        end
      end
      if attributes[:'refunds']
        if (value = attributes[:'refunds']).is_a?(Array)
          self.refunds = value
        end
      end
      if attributes[:'reference_id']
        self.reference_id = attributes[:'reference_id']
      end
      if attributes[:'product']
        self.product = attributes[:'product']
      end
      if attributes[:'client_id']
        self.client_id = attributes[:'client_id']
      end
      if attributes[:'order']
        self.order = attributes[:'order']
      end
      if attributes[:'shipping_address']
        self.shipping_address = attributes[:'shipping_address']
      end
    end

    # Custom attribute writer method checking allowed values (enum).
    def product=(product)
      @product = product
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          location_id == o.location_id &&
          created_at == o.created_at &&
          tenders == o.tenders &&
          refunds == o.refunds &&
          reference_id == o.reference_id &&
          product == o.product &&
          client_id == o.client_id &&
          order == o.order &&
          shipping_address == o.shipping_address
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [id, location_id, created_at, tenders, refunds, reference_id, product, client_id, order, shipping_address].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SquareConnect.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
