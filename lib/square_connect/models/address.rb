=begin
Square Connect API

No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SquareConnect
  # Represents a physical address.
  class Address
    # The first line of the address.  Fields that start with `address_line` provide the address's most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields).
    attr_accessor :address_line_1

    # The second line of the address, if any.
    attr_accessor :address_line_2

    # The third line of the address, if any.
    attr_accessor :address_line_3

    # The city or town of the address.
    attr_accessor :locality

    # A civil region within the address's `locality`, if any.
    attr_accessor :sublocality

    # A civil region within the address's `sublocality`, if any.
    attr_accessor :sublocality_2

    # A civil region within the address's `sublocality_2`, if any.
    attr_accessor :sublocality_3

    # A civil entity within the address's country. In the US, this is the state.
    attr_accessor :administrative_district_level_1

    # A civil entity within the address's `administrative_district_level_1`. In the US, this is the county.
    attr_accessor :administrative_district_level_2

    # A civil entity within the address's `administrative_district_level_2`, if any.
    attr_accessor :administrative_district_level_3

    # The address's postal code.
    attr_accessor :postal_code

    # The address's country, in ISO 3166-1-alpha-2 format.
    attr_accessor :country

    # Optional first name when it's representing recipient.
    attr_accessor :first_name

    # Optional last name when it's representing recipient.
    attr_accessor :last_name

    # Optional organization name when it's representing recipient.
    attr_accessor :organization

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'address_line_1' => :'address_line_1',
        :'address_line_2' => :'address_line_2',
        :'address_line_3' => :'address_line_3',
        :'locality' => :'locality',
        :'sublocality' => :'sublocality',
        :'sublocality_2' => :'sublocality_2',
        :'sublocality_3' => :'sublocality_3',
        :'administrative_district_level_1' => :'administrative_district_level_1',
        :'administrative_district_level_2' => :'administrative_district_level_2',
        :'administrative_district_level_3' => :'administrative_district_level_3',
        :'postal_code' => :'postal_code',
        :'country' => :'country',
        :'first_name' => :'first_name',
        :'last_name' => :'last_name',
        :'organization' => :'organization'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'address_line_1' => :'String',
:'address_line_2' => :'String',
:'address_line_3' => :'String',
:'locality' => :'String',
:'sublocality' => :'String',
:'sublocality_2' => :'String',
:'sublocality_3' => :'String',
:'administrative_district_level_1' => :'String',
:'administrative_district_level_2' => :'String',
:'administrative_district_level_3' => :'String',
:'postal_code' => :'String',
:'country' => :'String',
:'first_name' => :'String',
:'last_name' => :'String',
:'organization' => :'String'
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      if attributes[:'address_line_1']
        self.address_line_1 = attributes[:'address_line_1']
      end
      if attributes[:'address_line_2']
        self.address_line_2 = attributes[:'address_line_2']
      end
      if attributes[:'address_line_3']
        self.address_line_3 = attributes[:'address_line_3']
      end
      if attributes[:'locality']
        self.locality = attributes[:'locality']
      end
      if attributes[:'sublocality']
        self.sublocality = attributes[:'sublocality']
      end
      if attributes[:'sublocality_2']
        self.sublocality_2 = attributes[:'sublocality_2']
      end
      if attributes[:'sublocality_3']
        self.sublocality_3 = attributes[:'sublocality_3']
      end
      if attributes[:'administrative_district_level_1']
        self.administrative_district_level_1 = attributes[:'administrative_district_level_1']
      end
      if attributes[:'administrative_district_level_2']
        self.administrative_district_level_2 = attributes[:'administrative_district_level_2']
      end
      if attributes[:'administrative_district_level_3']
        self.administrative_district_level_3 = attributes[:'administrative_district_level_3']
      end
      if attributes[:'postal_code']
        self.postal_code = attributes[:'postal_code']
      end
      if attributes[:'country']
        self.country = attributes[:'country']
      end
      if attributes[:'first_name']
        self.first_name = attributes[:'first_name']
      end
      if attributes[:'last_name']
        self.last_name = attributes[:'last_name']
      end
      if attributes[:'organization']
        self.organization = attributes[:'organization']
      end
    end

    # Custom attribute writer method checking allowed values (enum).
    def country=(country)
      @country = country
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          address_line_1 == o.address_line_1 &&
          address_line_2 == o.address_line_2 &&
          address_line_3 == o.address_line_3 &&
          locality == o.locality &&
          sublocality == o.sublocality &&
          sublocality_2 == o.sublocality_2 &&
          sublocality_3 == o.sublocality_3 &&
          administrative_district_level_1 == o.administrative_district_level_1 &&
          administrative_district_level_2 == o.administrative_district_level_2 &&
          administrative_district_level_3 == o.administrative_district_level_3 &&
          postal_code == o.postal_code &&
          country == o.country &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          organization == o.organization
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [address_line_1, address_line_2, address_line_3, locality, sublocality, sublocality_2, sublocality_3, administrative_district_level_1, administrative_district_level_2, administrative_district_level_3, postal_code, country, first_name, last_name, organization].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SquareConnect.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
