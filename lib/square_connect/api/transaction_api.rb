=begin
Square Connect API

No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module SquareConnect
  class TransactionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # CaptureTransaction
    # Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
    # @param authorization The value to provide in the Authorization header of your request. This value should follow the format &#x60;Bearer YOUR_ACCESS_TOKEN_HERE&#x60;.
    # @param location_id 
    # @param transaction_id 
    # @param [Hash] opts the optional parameters
    # @return [CaptureTransactionResponse]
    def capture_transaction(authorization, location_id, transaction_id, opts = {})
      data, status_code, headers = capture_transaction_with_http_info(authorization, location_id, transaction_id, opts)
      return data
    end

    # CaptureTransaction
    # Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
    # @param authorization The value to provide in the Authorization header of your request. This value should follow the format &#x60;Bearer YOUR_ACCESS_TOKEN_HERE&#x60;.
    # @param location_id 
    # @param transaction_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CaptureTransactionResponse, Fixnum, Hash)>] CaptureTransactionResponse data, response status code and response headers
    def capture_transaction_with_http_info(authorization, location_id, transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TransactionApi#capture_transaction ..."
      end
      
      # verify the required parameter 'authorization' is set
      fail "Missing the required parameter 'authorization' when calling capture_transaction" if authorization.nil?
      
      # verify the required parameter 'location_id' is set
      fail "Missing the required parameter 'location_id' when calling capture_transaction" if location_id.nil?
      
      # verify the required parameter 'transaction_id' is set
      fail "Missing the required parameter 'transaction_id' when calling capture_transaction" if transaction_id.nil?
      
      # resource path
      path = "/v2/locations/{location_id}/transactions/{transaction_id}/capture".sub('{format}','json').sub('{' + 'location_id' + '}', location_id.to_s).sub('{' + 'transaction_id' + '}', transaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CaptureTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionApi#capture_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Charge
    # Charges a card represented by a card nonce or a customer&#39;s card on file.  Your request to this endpoint must include _either_:  - A value for the &#x60;card_nonce&#x60; parameter (to charge a card nonce generated with the &#x60;SqPaymentForm&#x60;) - Values for the &#x60;customer_card_id&#x60; and &#x60;customer_id&#x60; parameters (to charge a customer&#39;s card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - &#x60;buyer_email_address&#x60; - At least one of &#x60;billing_address&#x60; or &#x60;shipping_address&#x60;  When this response is returned, the amount of Square&#39;s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the &#x60;processing_fee_money&#x60; field of each [Tender included](#type-tender) in the transaction.
    # @param authorization The value to provide in the Authorization header of your request. This value should follow the format &#x60;Bearer YOUR_ACCESS_TOKEN_HERE&#x60;.
    # @param location_id The ID of the location to associate the created transaction with.
    # @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
    # @param [Hash] opts the optional parameters
    # @return [ChargeResponse]
    def charge(authorization, location_id, body, opts = {})
      data, status_code, headers = charge_with_http_info(authorization, location_id, body, opts)
      return data
    end

    # Charge
    # Charges a card represented by a card nonce or a customer&#39;s card on file.  Your request to this endpoint must include _either_:  - A value for the &#x60;card_nonce&#x60; parameter (to charge a card nonce generated with the &#x60;SqPaymentForm&#x60;) - Values for the &#x60;customer_card_id&#x60; and &#x60;customer_id&#x60; parameters (to charge a customer&#39;s card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - &#x60;buyer_email_address&#x60; - At least one of &#x60;billing_address&#x60; or &#x60;shipping_address&#x60;  When this response is returned, the amount of Square&#39;s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the &#x60;processing_fee_money&#x60; field of each [Tender included](#type-tender) in the transaction.
    # @param authorization The value to provide in the Authorization header of your request. This value should follow the format &#x60;Bearer YOUR_ACCESS_TOKEN_HERE&#x60;.
    # @param location_id The ID of the location to associate the created transaction with.
    # @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChargeResponse, Fixnum, Hash)>] ChargeResponse data, response status code and response headers
    def charge_with_http_info(authorization, location_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TransactionApi#charge ..."
      end
      
      # verify the required parameter 'authorization' is set
      fail "Missing the required parameter 'authorization' when calling charge" if authorization.nil?
      
      # verify the required parameter 'location_id' is set
      fail "Missing the required parameter 'location_id' when calling charge" if location_id.nil?
      
      # verify the required parameter 'body' is set
      fail "Missing the required parameter 'body' when calling charge" if body.nil?
      
      # resource path
      path = "/v2/locations/{location_id}/transactions".sub('{format}','json').sub('{' + 'location_id' + '}', location_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChargeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionApi#charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # ListTransactions
    # Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
    # @param authorization The value to provide in the Authorization header of your request. This value should follow the format &#x60;Bearer YOUR_ACCESS_TOKEN_HERE&#x60;.
    # @param location_id The ID of the location to list transactions for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :begin_time The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
    # @option opts [String] :end_time The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
    # @option opts [String] :sort_order The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
    # @option opts [String] :cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
    # @return [ListTransactionsResponse]
    def list_transactions(authorization, location_id, opts = {})
      data, status_code, headers = list_transactions_with_http_info(authorization, location_id, opts)
      return data
    end

    # ListTransactions
    # Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
    # @param authorization The value to provide in the Authorization header of your request. This value should follow the format &#x60;Bearer YOUR_ACCESS_TOKEN_HERE&#x60;.
    # @param location_id The ID of the location to list transactions for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :begin_time The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
    # @option opts [String] :end_time The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
    # @option opts [String] :sort_order The order in which results are listed in the response (&#x60;ASC&#x60; for oldest first, &#x60;DESC&#x60; for newest first).  Default value: &#x60;DESC&#x60;
    # @option opts [String] :cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
    # @return [Array<(ListTransactionsResponse, Fixnum, Hash)>] ListTransactionsResponse data, response status code and response headers
    def list_transactions_with_http_info(authorization, location_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TransactionApi#list_transactions ..."
      end
      
      # verify the required parameter 'authorization' is set
      fail "Missing the required parameter 'authorization' when calling list_transactions" if authorization.nil?
      
      # verify the required parameter 'location_id' is set
      fail "Missing the required parameter 'location_id' when calling list_transactions" if location_id.nil?
      
      if opts[:'sort_order'] && !['DESC', 'ASC'].include?(opts[:'sort_order'])
        fail 'invalid value for "sort_order", must be one of DESC, ASC'
      end
      
      # resource path
      path = "/v2/locations/{location_id}/transactions".sub('{format}','json').sub('{' + 'location_id' + '}', location_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'begin_time'] = opts[:'begin_time'] if opts[:'begin_time']
      query_params[:'end_time'] = opts[:'end_time'] if opts[:'end_time']
      query_params[:'sort_order'] = opts[:'sort_order'] if opts[:'sort_order']
      query_params[:'cursor'] = opts[:'cursor'] if opts[:'cursor']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListTransactionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionApi#list_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # RetrieveTransaction
    # Retrieves details for a single transaction.
    # @param authorization The value to provide in the Authorization header of your request. This value should follow the format &#x60;Bearer YOUR_ACCESS_TOKEN_HERE&#x60;.
    # @param location_id The ID of the transaction&#39;s associated location.
    # @param transaction_id The ID of the transaction to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [RetrieveTransactionResponse]
    def retrieve_transaction(authorization, location_id, transaction_id, opts = {})
      data, status_code, headers = retrieve_transaction_with_http_info(authorization, location_id, transaction_id, opts)
      return data
    end

    # RetrieveTransaction
    # Retrieves details for a single transaction.
    # @param authorization The value to provide in the Authorization header of your request. This value should follow the format &#x60;Bearer YOUR_ACCESS_TOKEN_HERE&#x60;.
    # @param location_id The ID of the transaction&#39;s associated location.
    # @param transaction_id The ID of the transaction to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetrieveTransactionResponse, Fixnum, Hash)>] RetrieveTransactionResponse data, response status code and response headers
    def retrieve_transaction_with_http_info(authorization, location_id, transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TransactionApi#retrieve_transaction ..."
      end
      
      # verify the required parameter 'authorization' is set
      fail "Missing the required parameter 'authorization' when calling retrieve_transaction" if authorization.nil?
      
      # verify the required parameter 'location_id' is set
      fail "Missing the required parameter 'location_id' when calling retrieve_transaction" if location_id.nil?
      
      # verify the required parameter 'transaction_id' is set
      fail "Missing the required parameter 'transaction_id' when calling retrieve_transaction" if transaction_id.nil?
      
      # resource path
      path = "/v2/locations/{location_id}/transactions/{transaction_id}".sub('{format}','json').sub('{' + 'location_id' + '}', location_id.to_s).sub('{' + 'transaction_id' + '}', transaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RetrieveTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionApi#retrieve_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # VoidTransaction
    # Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
    # @param authorization The value to provide in the Authorization header of your request. This value should follow the format &#x60;Bearer YOUR_ACCESS_TOKEN_HERE&#x60;.
    # @param location_id 
    # @param transaction_id 
    # @param [Hash] opts the optional parameters
    # @return [VoidTransactionResponse]
    def void_transaction(authorization, location_id, transaction_id, opts = {})
      data, status_code, headers = void_transaction_with_http_info(authorization, location_id, transaction_id, opts)
      return data
    end

    # VoidTransaction
    # Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
    # @param authorization The value to provide in the Authorization header of your request. This value should follow the format &#x60;Bearer YOUR_ACCESS_TOKEN_HERE&#x60;.
    # @param location_id 
    # @param transaction_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VoidTransactionResponse, Fixnum, Hash)>] VoidTransactionResponse data, response status code and response headers
    def void_transaction_with_http_info(authorization, location_id, transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TransactionApi#void_transaction ..."
      end
      
      # verify the required parameter 'authorization' is set
      fail "Missing the required parameter 'authorization' when calling void_transaction" if authorization.nil?
      
      # verify the required parameter 'location_id' is set
      fail "Missing the required parameter 'location_id' when calling void_transaction" if location_id.nil?
      
      # verify the required parameter 'transaction_id' is set
      fail "Missing the required parameter 'transaction_id' when calling void_transaction" if transaction_id.nil?
      
      # resource path
      path = "/v2/locations/{location_id}/transactions/{transaction_id}/void".sub('{format}','json').sub('{' + 'location_id' + '}', location_id.to_s).sub('{' + 'transaction_id' + '}', transaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VoidTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionApi#void_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
